AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: This stack handles the micro-front storage with s3 bucket and cloudfront for distribution and a lambda edge for handling routings and flags
  
Globals:
  Function:
    Timeout: 3

Parameters:
  BucketName:
    Type: String
    Default: mfe-on-the-edge
  MemorySize:
    Type: Number
    Default: 128
  Timeout:
    Type: Number
    Default: 5
  Runtime:
    Type: String
    Default: nodejs18.x

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::Region}-${AWS::AccountId}-${BucketName}'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: ["GET", "POST", "PUT", "DELETE"]
            AllowedOrigins: ["*"]
            MaxAge: 3000

  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Id: S3BucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: "Grant CloudFront access to the bucket"
            Effect: Allow
            Action: "s3:GetObject"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref S3Bucket, "/*"]]

  CFDistributionForStatics:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - CloudFrontOAI
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: !Sub '${BucketName} serves to access static files from edge'
          PriceClass: PriceClass_100
          Origins:
            - DomainName: !GetAtt S3Bucket.RegionalDomainName
              Id: !Ref S3Bucket
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
          DefaultCacheBehavior:
            ViewerProtocolPolicy: redirect-to-https
            TargetOriginId: !Ref S3Bucket
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
            ForwardedValues: 
              QueryString: false 
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
            MinimumProtocolVersion: 'TLSv1.2_2021'

  CFDistributionForTheEdge:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - CloudFrontOAI
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: !Sub '${BucketName} is the entry to be handled by lambda@edge'
          DefaultRootObject: index.html
          PriceClass: PriceClass_100
          CustomErrorResponses:
            - ErrorCode: 400
              ResponseCode: 400
              ResponsePagePath: /pages/error/index.html
            - ErrorCode: 403
              ResponseCode: 403
              ResponsePagePath: /pages/error/index.html
            - ErrorCode: 404
              ResponseCode: 404
              ResponsePagePath: /pages/error/index.html
            - ErrorCode: 500
              ResponseCode: 500
              ResponsePagePath: /pages/error/index.html
          Origins:
            - DomainName: !GetAtt S3Bucket.RegionalDomainName
              Id: !Ref S3Bucket
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
          DefaultCacheBehavior:
            ViewerProtocolPolicy: redirect-to-https
            TargetOriginId: !Ref S3Bucket
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingOptimized
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
            ForwardedValues: 
              QueryString: false 
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref LambdaEdgeFunction.Version
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
            MinimumProtocolVersion: 'TLSv1.2_2021'

  CloudFrontOAI:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    DependsOn:
      - S3Bucket
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Micro-frontend OAI"

  LambdaEdgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: src/
      Handler: index.handler
      Runtime: !Ref Runtime
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      Role: !GetAtt LambdaEdgeRole.Arn

  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaEdgePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Join
                    - ""
                    - - arn:aws:s3:::
                      - !Ref S3Bucket
                  - !Join
                    - ""
                    - - arn:aws:s3:::
                      - !Ref S3Bucket
                      - "/*"

